CSS
---
- Cascading style sheets
- HTML describes content
- CSS formats content

CSS selectors
- How CSS identifies given elements to format

- Class: <p class="bobberts">
  - Typically used for many elements
  - Selected by the . character:
    .bobberts {

    }

- ID: <p id="bobbert">
  - Typically used to identify one unique element
  - Selected by the # character:
    #bobbert {

    }

Using CSS
- inline
  <div style="background-color:blue">
- internal style sheet
  - uses the "style" tag to create a CSS block inside of the given HTML page
    <style>
      div {
        background color:blue;
      }
    </style>
- external style sheet
  - CSS saved as a separate file
  - brought in with the <link> tag
    <link rel="stylesheet" type="text/css" href="directory location">

Absolute vs. relative path
- Absolute: full directory starting from root folder
  Windows: C:/F1/F2/F3/file.txt

- Relative: Path starting from current location
  - Assuming we are in F2:
    Windows: F3/file.txt

Bootstrap
---------
- Collection of CSS and JS files for designing fluid, mobile friendly websites
- Utilizes a grid system for horizontally formatting CSS.
  - class=container
  - class=row
  - class=col

col-size-width
  - size: how big of a screen you expect users to have
    - xs: mobile
    - sm: tablets
    - md: standard computers
    - lg: large monitors
  - width (1-12): how much real estate your specific column takes

XML-eXtensible Markup Language
  - often used for distributing info over the internet
  - designed to store & transport data
  - self-descriptive
  - Doesn't DO anything
  - XML carries data, HTML, displays data

Syntax
  - follows the same structure as HTML (i.e. tags, elements, attributes, etc.)
    - attributes are typically used for metadata (data of data)
  - MUST have ONE root tag
  - Optionally have a prolog
    - Must be the first line if used
    - <? xml version="1.0" encoding="UTF-8" ?>
  - All elements MUST have closing tags
  - Tags MUST match case.
  - Attributes MUST be quoted.
  - If used, reserved symbols (e.g. & ;) require entity references.
  - Note: White space preserved
  - no overlapping tags
  - Follow all of these rules properly then will have well-formed XML

Namespaces and prefixes
-----------------------
To avoid clashing words that are used for other reasons, we can use prefixes with namespaces.
- <root xmlns:prefix="some URI, it's arbitrary">
    <prefix:table>
      <prefix:tr>
      </prefix:tr>
    </prefix:table>
  </root>
  <tables xmlns:xml="custom tables">
    <xml:table>
      <xml:tr>
        <xml:td>Stuff</xml:td>
        <xml:td>Stuff2</xml:td>
      </xml:tr>
    </xml:tr>
  </tables>

DTD: Document Type Definition
 - external or internal file that XML can use to enforce specific naming conventions and structure
XSD: XML Schema Definition
 - Same goals and use as a DTD
 - However, it is stronger
   - has more complex rulesets such as datatype enforcement
 - Written in XML

If your XML is well-formed and perfectly conforms to an XSD or DTD, then you have valid XML.